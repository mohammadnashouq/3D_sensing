#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Fri Jan 20 13:56:46 2023
This is the program that prints out plots from the runlogs.csv 
Generated by the iterative closest point and trimmed iterative closest point algorithm
@author: daniel
"""

#%% Libraries
import os
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import warnings
warnings.filterwarnings('ignore')

os.chdir('/home/daniel/source/repos/3dSensing/03_cloud_registration')

PROJECT_ROOT_DIR = "."
IMAGES_PATH = os.path.join(PROJECT_ROOT_DIR, "plots")
os.makedirs(IMAGES_PATH, exist_ok=True)

#%% Helper function to save figures
def save_fig(fig_id, tight_layout=True, resolution=300):
    path = os.path.join(IMAGES_PATH, fig_id)
    path = path + '.png'
    print("Saving figure", fig_id)
    if tight_layout:
        plt.tight_layout()
    plt.savefig(path, format='png', dpi=resolution)
    
#%% Plot a transformation matrix
def plot_transformation(T, show=False):
    df = pd.DataFrame(np.array(list(map(float, T.split(',')))).reshape((4,4)))
    sns.heatmap(df, annot=True, fmt='g', cmap='viridis', vmin=-1, vmax=1)
    if(show):
        plt.show()

#%% Plot multiple transformation matrices
def plot_T_multi(df):
    for i in range(0, len(df), 2):
        # Set figure properties
        fig = plt.figure(figsize=(20,7))
        fig.suptitle('Visualization of transformation matrices for ' + df.loc[i, 'cloud_name'] + 
                     '\n noise=' + str(df.loc[i,'noise']) + 
                     '; rotation=' + str(df.loc[i, 'rotation']) + 
                     '; translation=' + str(df.loc[i, 'translation']), size=15)
        
        # Create plot for ICP
        T = df.loc[i, 'T_pred']
        ax = fig.add_subplot(1,3,1)
        ax.set_title('ICP')
        ax = plot_transformation(T, show=False)
        
        # Create plot for TR-ICP
        T = df.loc[i+1, 'T_pred']
        ax = fig.add_subplot(1,3,2)
        ax.set_title('TR-ICP')
        ax = plot_transformation(T, show=False)

        # Create plot for GT
        T = df.loc[i, 'T_true']
        ax = fig.add_subplot(1,3,3)
        ax.set_title('GT')
        ax = plot_transformation(T, show=False)

        figname = 'Transform_compare_' + df.loc[i,'cloud_name']
        figname += '_noise=' + str(df.loc[i,'noise'])
        figname += '_rotation=' + str(df.loc[i,'rotation'])
        figname += '_translation=' + str(df.loc[i,'translation'])
        save_fig(figname)
        
#%% Compare processing times
def plot_col(df, metric):
    ds = pd.Series(df[metric])
    ls = []
    for i in range(len(df)):
        name = df.loc[i,'cloud_name']
        name += '_n=' + str(df.loc[i,'noise'])
        name += '_r=' + str(df.loc[i,'rotation'])
        name += '_t=' + str(df.loc[i,'translation'])
        ls.append(name)
    ds.index = ls
    fig = plt.figure(figsize=(15,8))
    fig.suptitle('Processing ' + metric + ' for all configurations', size=15)
    sns.barplot(x = ds.index, y = ds.values)
    plt.xticks(rotation = 70)
    save_fig('Overview_compare_' + metric + '_all')
    plt.show()

#%% Compare ICP and TR-ICP
def plot_icp_tricp(df):
    cmap = plt.colormaps['viridis'].colors
    for i in range(0, len(df), 2):
        
        # General config
        fig = plt.figure(constrained_layout=True, figsize=(17,5))
        fig.suptitle(df.loc[i,'cloud_name'], size=20)
        subfigs = fig.subfigures(1, 2, wspace=0.07)
        
        # Left plots
        axs_left = subfigs[0].subplots(3, 1, sharey=False)
        subfigs[0].suptitle('Initial conditions', fontsize='x-large')
        
        j = 0
        for x,ax in zip(['noise','rotation','translation'], axs_left):
            tmp = pd.Series(df.loc[i,x], index=[x])
            ax.barh(tmp.index, tmp.values, color=cmap[j])
            ax.set_xlim((min(df[x]), max(df[x])))
            j += 30
            
        # Right plots
        axs_right = subfigs[1].subplots(1, 4, sharey=False)
        subfigs[1].suptitle('Metrics')
        
        for x,ax in zip(['n_iter','time','error_rotation','error_translation'], axs_right):
            tmp = pd.Series(list(df.loc[[i,i+1], x]), index=df.loc[[i,i+1],'method'])
            ax.bar(tmp.index, tmp.values, color=cmap[j])
            ax.set_ylim((min(df[x]), max(df[x])))
            ax.set_title(x)
            j += 30
        
        figname = 'Metric_compare_' + df.loc[i,'cloud_name']
        figname += '_noise=' + str(df.loc[i,'noise'])
        figname += '_rotation=' + str(df.loc[i,'rotation'])
        figname += '_translation=' + str(df.loc[i,'translation'])            
        save_fig(figname + '_config', tight_layout=False)
        plt.show()
        


#%% Main program
if(__name__ == '__main__'):
    df = pd.read_csv('runlogs.csv', sep=';', header=0)
    df = df.fillna(0)
    plot_col(df, 'time')
    plot_col(df, 'n_iter')
    plot_T_multi(df)
    df = pd.read_csv('runlogs.csv', sep=';', header=0) # This may seem to do nothing but delete it and the code will crash
    df = df.fillna(0)
    plot_icp_tricp(df)